module;

#include <cstdint>
#include <memory>
#include <string>

export module communication.connection_info_provider;

import core.host_types;
import base.preferences;

namespace reclip {

export class ConnectionInfoProvider {
 public:
  static std::unique_ptr<ConnectionInfoProvider> Create();
  virtual ~ConnectionInfoProvider() = default;
  virtual HostSecret GetSecret() const = 0;
  virtual const std::string& GetIp() const = 0;
  virtual uint16_t GetPort() const = 0;
};

class ConnectionInfoProviderImpl : public ConnectionInfoProvider {
 public:
  ~ConnectionInfoProviderImpl() override = default;

  HostSecret GetSecret() const override {
    return Preferences::GetInstance().GetHostSecret();
  }

  const std::string& GetIp() const override {
    return Preferences::GetInstance().GetServerIp();
  }

  uint16_t GetPort() const override {
    return Preferences::GetInstance().GetServerPort();
  }
};

std::unique_ptr<ConnectionInfoProvider> ConnectionInfoProvider::Create() {
  return std::make_unique<ConnectionInfoProviderImpl>();
}

}  // namespace reclip
