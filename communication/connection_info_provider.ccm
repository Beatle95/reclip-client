module;

#include <QFile>
#include <QJsonDocument>
#include <cstdint>
#include <memory>
#include <stdexcept>
#include <string>
#include <string_view>

export module communication.connection_info_provider;

import base.constants;
import core.host_types;

namespace reclip {

export class ConnectionInfoProvider {
 public:
  static std::unique_ptr<ConnectionInfoProvider> Create(std::string_view config_path);
  virtual ~ConnectionInfoProvider() = default;

  virtual HostSecretId GetSecret() const = 0;
  virtual const std::string& GetIp() const = 0;
  virtual uint16_t GetPort() const = 0;
};

class ConnectionInfoProviderImpl : public ConnectionInfoProvider {
 public:
  explicit ConnectionInfoProviderImpl(std::string_view config_path);
  ~ConnectionInfoProviderImpl() override = default;

  HostSecretId GetSecret() const override { return host_secret_; }
  const std::string& GetIp() const override { return server_ip_; }
  uint16_t GetPort() const override { return server_port_; }

 private:
  HostSecretId host_secret_;
  std::string server_ip_;
  uint16_t server_port_;
};

std::unique_ptr<ConnectionInfoProvider> ConnectionInfoProvider::Create(
    std::string_view config_path) {
  return std::make_unique<ConnectionInfoProviderImpl>(config_path);
}

ConnectionInfoProviderImpl::ConnectionInfoProviderImpl(std::string_view config_path) {
  const auto path = QString::fromUtf8(config_path.data(), config_path.size());
  QFile file(path);
  if (!file.open(QIODevice::ReadOnly)) {
    throw std::runtime_error("Failed to open preferences file");
  }

  const auto json = QJsonDocument::fromJson(file.readAll());
  if (json.isNull()) {
    throw std::runtime_error("Failed to parse preferences file");
  }
  const auto decoded = QByteArray::fromBase64(json["secret"].toString().toUtf8());
  if (decoded.size() != HostSecretId::kSecretSize) {
    throw std::runtime_error("Failed to load host's secret, it's size is incorrect");
  }
  host_secret_ = HostSecretId(std::span(decoded.data(), decoded.size()));
  server_ip_ = json["server_ip"].toString("127.0.0.1").toStdString();
  server_port_ = json["server_port"].toInt(kDefaultServerPort);
}

}  // namespace reclip
