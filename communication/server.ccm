module;

#include <chrono>
#include <functional>
#include <optional>
#include <string>

export module communication.server;

import core.host_types;
import communication.connection_info_provider;

namespace reclip {

// This interface describes Server->Client calls.
export class ServerDelegate {
 public:
  virtual ~ServerDelegate() = default;
  virtual ConnectionInfoProvider& GetConnectionInfoProvider() = 0;
  virtual void OnFullSync(HostData, std::vector<HostData>) = 0;
  virtual void HostConnected(const HostId& id) = 0;
  virtual void HostDisconnected(const HostId& id) = 0;
  virtual void HostTextAdded(const HostId& id, const std::string& text) = 0;
  virtual void HostSynced(HostData data) = 0;
};

// This interface describes Client->Server calls.
export class Server {
 public:
  using HostSyncCallback = std::function<void(std::optional<HostData>)>;

  virtual ~Server() = default;
  virtual void Disconnect(std::function<void(bool)> callback,
                          std::chrono::milliseconds timeout) = 0;
  virtual void RequestHostSync(const HostId& id, HostSyncCallback callback) = 0;
  virtual void SyncThisHost(const HostData& data) = 0;
  virtual void AddThisHostText(const std::string& text) = 0;
};

}  // namespace reclip
