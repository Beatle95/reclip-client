module;

#include <QDateTime>
#include <format>
#include <print>
#include <string_view>

#include "base/buildflags.h"

export module base.log;

enum class LogSeverity { kInfo, kWarning, kError, kFatal };

std::string_view SeverityToString(LogSeverity val) {
  switch (val) {
    case LogSeverity::kInfo:
      return "INFO";
    case LogSeverity::kWarning:
      return "WARNING";
    case LogSeverity::kError:
      return "ERROR";
    case LogSeverity::kFatal:
      return "FATAL";
  }
}

void LogImpl(LogSeverity severity, std::string_view log_string) {
  const auto time_str = QDateTime::currentDateTime()
                            .toString(QStringLiteral("yyyy.MM.dd hh:mm:ss.zzz"))
                            .toStdString();
  std::println("{} [{}] {}", time_str, SeverityToString(severity), log_string);
}

export namespace reclip {

template <typename... Args>
void LogInfo(std::format_string<Args...> format_str, Args&&... args) {
  LogImpl(LogSeverity::kInfo, std::format(format_str, std::forward<Args>(args)...));
}

template <typename... Args>
void LogWarning(std::format_string<Args...> format_str, Args&&... args) {
  LogImpl(LogSeverity::kWarning, std::format(format_str, std::forward<Args>(args)...));
}

template <typename... Args>
void LogError(std::format_string<Args...> format_str, Args&&... args) {
  LogImpl(LogSeverity::kError, std::format(format_str, std::forward<Args>(args)...));
}

template <typename... Args>
void LogFatal(std::format_string<Args...> format_str, Args&&... args) {
  LogImpl(LogSeverity::kFatal, std::format(format_str, std::forward<Args>(args)...));
}

// Log functions which is enabled only in Debug builds.

template <typename... Args>
void DLogInfo(std::format_string<Args...> format_str, Args&&... args) {
  if constexpr (BUILDFLAG(DLOG_ON)) {
    LogImpl(LogSeverity::kInfo, std::format(format_str, std::forward<Args>(args)...));
  }
}

template <typename... Args>
void DLogWarning(std::format_string<Args...> format_str, Args&&... args) {
  if constexpr (BUILDFLAG(DLOG_ON)) {
    LogImpl(LogSeverity::kWarning, std::format(format_str, std::forward<Args>(args)...));
  }
}

template <typename... Args>
void DLogError(std::format_string<Args...> format_str, Args&&... args) {
  if constexpr (BUILDFLAG(DLOG_ON)) {
    LogImpl(LogSeverity::kError, std::format(format_str, std::forward<Args>(args)...));
  }
}

template <typename... Args>
void DLogFatal(std::format_string<Args...> format_str, Args&&... args) {
  if constexpr (BUILDFLAG(DLOG_ON)) {
    LogImpl(LogSeverity::kFatal, std::format(format_str, std::forward<Args>(args)...));
  }
}

}  // namespace reclip
