module;

#include <cassert>
#include <string>
#include <string_view>

export module base;

import core;

namespace reclip {

export class Preferences {
 public:
  ~Preferences() = default;
  static Preferences& GetInstance();

  // Main preferences.
  void SetHostSecret(const HostId& id);
  const HostId& GetHostSecret() const;

  void SetServerIp(std::string_view ip);
  const std::string& GetServerIp() const;
  void SetServerPort(uint16_t port);
  uint16_t GetServerPort() const;

 private:
  Preferences() = default;
  HostId id_;
  std::string server_ip_;
  uint16_t server_port_;
};

Preferences& Preferences::GetInstance() {
  static Preferences instance;
  return instance;
}

void Preferences::SetHostSecret(const HostId& id) {
  assert(!id.empty());
  id_ = id;
}

const HostId& Preferences::GetHostSecret() const { return id_; }

void Preferences::SetServerIp(std::string_view ip) { server_ip_ = ip; }

const std::string& Preferences::GetServerIp() const { return server_ip_; }

void Preferences::SetServerPort(uint16_t port) { server_port_ = port; }

uint16_t Preferences::GetServerPort() const { return server_port_; }

}  // namespace reclip
