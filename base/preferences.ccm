module;

#include <QFile>
#include <QJsonDocument>
#include <QJsonObject>
#include <cassert>
#include <cstdint>
#include <stdexcept>
#include <string>
#include <string_view>
#include <unordered_map>

export module base.preferences;

import base.log;

namespace reclip {

export class Preferences {
 public:
  static void Init(std::string_view prefs_path);
  static void Store(std::string_view prefs_path);
  static Preferences& GetInstance();

  Preferences(const Preferences&) = delete;
  Preferences& operator=(const Preferences&) = delete;
  Preferences(Preferences&&) = delete;
  Preferences& operator=(Preferences&&) = delete;

  void RegisterString(std::string_view key, std::string_view default_value);
  void RegisterInt(std::string_view key, int64_t default_value);

  void SetString(std::string_view key, std::string_view value);
  void SetInt(std::string_view key, int64_t value);

  std::string_view GetString(std::string_view key) const;
  int64_t GetInt(std::string_view key) const;

 private:
  static Preferences& GetInstanceImpl();
  void InitImpl(std::string_view prefs_path);
  void StoreImpl(std::string_view prefs_path);
  Preferences() = default;

  std::unordered_map<std::string, std::string> string_prefs_;
  std::unordered_map<std::string, int64_t> int_prefs_;
  bool initialized_ = false;
};

namespace {
const auto kStringPrefs = QStringLiteral("string_prefs");
const auto kIntPrefs = QStringLiteral("int_prefs");
}  // namespace

// static
void Preferences::Init(std::string_view prefs_path) { GetInstanceImpl().InitImpl(prefs_path); }

void Preferences::InitImpl(std::string_view prefs_path) {
  assert(!initialized_);

  const auto path = QString::fromUtf8(prefs_path.data(), prefs_path.size());
  QFile file(path);
  if (!file.open(QIODevice::ReadWrite)) {
    throw std::runtime_error("Failed to open preferences file");
  }

  const auto json = QJsonDocument::fromJson(file.readAll());
  if (json.isNull() || !json.isObject()) {
    // Empty prefs file, nothing to load.
    return;
  }

  auto root = json.object();
  if (root.contains(kStringPrefs)) {
    auto string_prefs = root[kStringPrefs];
    if (!string_prefs.isObject()) {
      throw std::runtime_error("Wrong format of string prefs");
    }
    const auto string_prefs_object = string_prefs.toObject();
    for (auto it = string_prefs_object.constBegin(); it != string_prefs_object.constEnd(); ++it) {
      string_prefs_[it.key().toStdString()] = it->toString().toStdString();
    }
  }

  if (root.contains(kIntPrefs)) {
    auto int_prefs = root[kIntPrefs];
    if (!int_prefs.isObject()) {
      throw std::runtime_error("Unable to initialize string prefs");
    }
    const auto int_prefs_object = int_prefs.toObject();
    for (auto it = int_prefs_object.constBegin(); it != int_prefs_object.constEnd(); ++it) {
      int_prefs_[it.key().toStdString()] = it->toInteger();
    }
  }

  initialized_ = true;
}

// static
void Preferences::Store(std::string_view prefs_path) { GetInstanceImpl().StoreImpl(prefs_path); }

void Preferences::StoreImpl(std::string_view prefs_path) {
  if (!initialized_) {
    return;
  }
  const auto path = QString::fromUtf8(prefs_path.data(), prefs_path.size());
  QFile file(path);
  if (!file.open(QIODevice::ReadWrite)) {
    LogError("Failed to open preferences file {}", prefs_path);
    return;
  }

  QJsonObject string_prefs_obj;
  for (const auto& [key, value] : string_prefs_) {
    string_prefs_obj[QString::fromStdString(key)] = QString::fromStdString(value);
  }

  QJsonObject int_prefs_obj;
  for (const auto& [key, value] : int_prefs_) {
    int_prefs_obj[QString::fromStdString(key)] = value;
  }

  QJsonObject root;
  root[kStringPrefs] = string_prefs_obj;
  root[kIntPrefs] = int_prefs_obj;
  file.write(QJsonDocument(root).toJson());

  string_prefs_.clear();
  int_prefs_.clear();
  initialized_ = false;
}

// static
Preferences& Preferences::GetInstance() {
  assert(GetInstanceImpl().initialized_);
  return GetInstanceImpl();
}

// static
Preferences& Preferences::GetInstanceImpl() {
  static Preferences instance;
  return instance;
}

void Preferences::RegisterString(std::string_view key, std::string_view default_value) {
  string_prefs_.emplace(key, default_value);
}

void Preferences::RegisterInt(std::string_view key, int64_t default_value) {
  int_prefs_.emplace(key, default_value);
}

void Preferences::SetString(std::string_view key, std::string_view value) {
  assert(string_prefs_.contains(std::string{key}));
  string_prefs_[std::string{key}] = value;
}

void Preferences::SetInt(std::string_view key, int64_t value) {
  assert(int_prefs_.contains(std::string{key}));
  int_prefs_[std::string{key}] = value;
}

std::string_view Preferences::GetString(std::string_view key) const {
  assert(string_prefs_.contains(std::string{key}));
  return string_prefs_.at(std::string{key});
}

int64_t Preferences::GetInt(std::string_view key) const {
  assert(int_prefs_.contains(std::string{key}));
  return int_prefs_.at(std::string{key});
}

}  // namespace reclip
