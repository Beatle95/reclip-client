module;

#include <cassert>
#include <cstdint>

namespace reclip {
class TestObserver;
}

export module base.observer_helper:observer;

namespace reclip {

export class Observer {
 public:
  Observer() = default;
  virtual ~Observer() = default;
  Observer(const Observer&) = delete;
  Observer(Observer&&) = delete;
  Observer& operator=(const Observer&) = delete;
  Observer& operator=(Observer&&) = delete;

 protected:
  virtual void OnSubscribe() = 0;
  virtual void OnUnsibscribe() = 0;
};

export class CheckedObserver : public Observer {
 public:
  ~CheckedObserver() override;

 private:
  template <typename T>
  friend class ObserversList;
  friend class TestObserver;

  void OnSubscribe() override;
  void OnUnsibscribe() override;

  uint32_t subscriptions_count_ = 0;
};

CheckedObserver::~CheckedObserver() {
  assert(subscriptions_count_ == 0 &&
         "Destructor of the subsceibed observer was called");
}

void CheckedObserver::OnSubscribe() { ++subscriptions_count_; }

void CheckedObserver::OnUnsibscribe() {
  assert(subscriptions_count_ != 0);
  --subscriptions_count_;
}

}  // namespace reclip
