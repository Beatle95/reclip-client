module;

#include <QApplication>
#include <QCommandLineOption>
#include <QCommandLineParser>
#include <QDir>
#include <QFile>
#include <QStandardPaths>
#include <QTimer>
#include <cassert>
#include <format>
#include <memory>
#include <stdexcept>

#include "core/clipboard.h"

export module app_main.application_main;

import base.constants;
import base.observer_helper;
import base.preferences;
import base.log;
import core.clipboard_model;
import communication.connection_info_provider;
import communication.communication_manager;
import ui.clipboard_controller;

namespace reclip {

struct InitArguments {
  QString app_data_dir;
  bool show_ui_on_startup = false;
};

export class ApplicationMain : public QApplication {
 public:
  ApplicationMain(int argc, char** argv);
  ~ApplicationMain();

  QDir GetUserDataDir() const { return app_data_dir_; }

 private:
  InitArguments ParseArgs();
  void InitAppData(const QString& user_overriden_data_dir);
  void PrefInit();
  void LoadStyleSheet();

  QDir app_data_dir_;

  std::unique_ptr<Clipboard> clipboard_;
  std::unique_ptr<ClipboardModel> model_;
  std::unique_ptr<CommunicationManager> communication_host_;
  std::unique_ptr<ClipboardController> controller_;

  ScopedObservation<ClipboardModel, Clipboard> model_observation_;
  ScopedObservation<ClipboardController, ClipboardModel> controller_observation_;
};

ApplicationMain::ApplicationMain(int argc, char** argv)
    : QApplication(argc, argv) {
  DLogInfo("Application::Ctor");
  setApplicationName(QString::fromUtf8(kAppName.data(), kAppName.size()));
  setApplicationVersion(QStringLiteral("0.0.1"));

  const auto init_args = ParseArgs();
  InitAppData(init_args.app_data_dir);
  Preferences::Init((app_data_dir_.absolutePath() + "/preferences.json").toStdString());
  auto conn_info_provider = ConnectionInfoProvider::Create(
      (app_data_dir_.absolutePath() + "/server_config.json").toStdString());
  
  LoadStyleSheet();

  model_ = std::make_unique<ClipboardModel>();
  clipboard_ = Clipboard::Create();
  clipboard_->Start();
  model_observation_.Reset(*model_, *clipboard_);

  communication_host_ =
      std::make_unique<CommunicationManager>(*model_, std::move(conn_info_provider));
  controller_ =
      std::make_unique<ClipboardController>(model_.get(), clipboard_.get());
  controller_observation_.Reset(*controller_, *model_);

  if (init_args.show_ui_on_startup) {
    QTimer::singleShot(0, [this]() { controller_->ShowUi(); });
  }
}

ApplicationMain::~ApplicationMain() {
  DLogInfo("Application::Dtor");
  clipboard_->Stop();
  Preferences::Store((app_data_dir_.absolutePath() + "/preferences.json").toStdString());
}

InitArguments ApplicationMain::ParseArgs() {
  QCommandLineParser parser;
  parser.setApplicationDescription("Reclip allows to synchronize clipboards of multiple devices.");
  parser.addHelpOption();
  parser.addVersionOption();

  QCommandLineOption show_ui_on_startup("show_ui_on_startup",
                                        "Show UI right after application is started.");
  parser.addOption(show_ui_on_startup);
  QCommandLineOption app_data_dir("app-data-dir", "Overrides default user data directrory path.",
                                   "path");
  parser.addOption(app_data_dir);

  parser.process(arguments());
  return {.app_data_dir = parser.value(app_data_dir),
          .show_ui_on_startup = parser.isSet(show_ui_on_startup)};
}

void ApplicationMain::InitAppData(const QString& user_overriden_data_dir) {
  app_data_dir_ = !user_overriden_data_dir.isEmpty()
                       ? user_overriden_data_dir
                       : QStandardPaths::writableLocation(QStandardPaths::AppDataLocation);
  if (!app_data_dir_.exists() && !app_data_dir_.mkpath(".")) {
    // TODO: Instead of throwing we want to show some dialog which will help to set up an
    // application.
    throw std::runtime_error(std::format("Failed to create user data directory: '{}'",
                                         app_data_dir_.absolutePath().toStdString()));
  }
  DLogInfo("User data directory: {}", app_data_dir_.absolutePath().toStdString());
}

void ApplicationMain::LoadStyleSheet() {
  QFile file(applicationDirPath() + "/dark.qss");
  if (!file.open(QIODeviceBase::ReadOnly)) {
    LogWarning("Unable to open application stylesheet file: {}",
               (applicationDirPath() + "/dark.qss").toStdString());
    return;
  }
  setStyleSheet(file.readAll());
}

}  // namespace reclip
