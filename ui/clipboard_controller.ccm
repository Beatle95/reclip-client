module;

#include <QPointer>
#include <cstdint>

#include "core/clipboard.h"
#include "ui/content_window.h"
#include "ui/host_clipboard_view.h"

export module ui.clipboard_controller;

import core.clipboard_model;
import core.host_types;

namespace reclip {

export class ClipboardController : public ClipboardModelObserver,
                                   public ContentWindow::Delegate {
 public:
  ClipboardController(ClipboardModel* model, Clipboard* clipboard);
  ~ClipboardController();
  void ShowUi();
  void HideUi();
  bool IsUiShown() const { return !!content_; }

  // ClipboardModelObserver overrides
  void OnThisTextPushed() override;
  void OnThisTextPoped() override;
  void OnTextPushed(size_t host_index) override;
  void OnTextPoped(size_t host_index) override;
  void OnHostUpdated(size_t host_index) override;
  void OnThisHostDataReset() override;
  void OnHostsDataReset() override;

  // ContentWindow::Delegate overrides
  void OnItemClicked(uint32_t host_index, uint32_t item_index) override;
  void OnClosed() override;

  ContentWindow* GetContentWindowForTests() const { return content_.get(); }

 private:
  void PopulateData(const HostData& model_data, HostClipboardView& view, bool this_device);
  void ShowHostsModelData();
  void OnTextPushedImpl(size_t index, const QString& text);
  void OnTextPopedImpl(size_t index);

  QPointer<ContentWindow> content_;
  ClipboardModel* model_;
  Clipboard* clipboard_;
};

namespace {
constexpr uint32_t kThisHostIndex = 0;
constexpr uint32_t kThisHostOffset = 1;
const auto kEmptyNameReplacement = QStringLiteral("Unknown");
}

ClipboardController::ClipboardController(ClipboardModel* model,
                                         Clipboard* clipboard)
    : model_(model), clipboard_(clipboard) {}

ClipboardController::~ClipboardController() = default;

void ClipboardController::ShowUi() {
  assert(!content_);
  content_ = new ContentWindow(this);

  auto* this_view = content_->AddHostView();
  assert(this_view);
  PopulateData(model_->GetThisHostData(), *this_view, true);

  ShowHostsModelData();
}

void ClipboardController::HideUi() {
  assert(content_);
  delete content_;
}

void ClipboardController::OnThisTextPushed() {
  OnTextPushedImpl(
      kThisHostIndex,
      QString::fromStdString(model_->GetThisHostData().data.text.front()));
}

void ClipboardController::OnThisTextPoped() { OnTextPopedImpl(kThisHostIndex); }

void ClipboardController::OnTextPushed(size_t host_index) {
  OnTextPushedImpl(kThisHostOffset + host_index,
                   QString::fromStdString(
                       model_->GetHostData(host_index).data.text.front()));
}

void ClipboardController::OnTextPoped(size_t host_index) {
  OnTextPopedImpl(kThisHostOffset + host_index);
}

void ClipboardController::OnHostUpdated(size_t host_index) {
  const auto view_index = kThisHostOffset + host_index;
  assert(view_index <= content_->HostsCount());
  if (view_index == content_->HostsCount()) {
    content_->AddHostView();
  }

  auto* view = content_->GetHostView(kThisHostOffset + host_index);
  assert(view);
  PopulateData(model_->GetHostData(host_index), *view, host_index == kThisHostIndex);
}

void ClipboardController::OnThisHostDataReset() {
  auto* this_view = content_->GetHostView(kThisHostIndex);
  assert(this_view);
  PopulateData(model_->GetThisHostData(), *this_view, true);
}

void ClipboardController::OnHostsDataReset() {
  content_->RemoveHostViews(kThisHostIndex + kThisHostOffset);
  ShowHostsModelData();
}

void ClipboardController::OnItemClicked(uint32_t host_index,
                                        uint32_t item_index) {
  const HostData* data = nullptr;
  if (host_index == kThisHostIndex) {
    data = &model_->GetThisHostData();
  } else {
    data = &model_->GetHostData(host_index - kThisHostOffset);
  }

  if (item_index >= data->data.text.size()) {
    assert(false && "Unexpected index, which exeeds data size");
    return;
  }
  clipboard_->WriteText(data->data.text[item_index]);
}

void ClipboardController::OnClosed() {
  assert(content_);
  content_->deleteLater();
}

void ClipboardController::PopulateData(const HostData& model_data, HostClipboardView& view,
                                       bool this_device) {
  auto name =
      !model_data.name.empty() ? QString::fromStdString(model_data.name) : kEmptyNameReplacement;
  if (this_device) {
    name.append(" (Current Device)");
  }
  view.SetName(name);
  view.Clear();
  for (const auto& elem : model_data.data.text) {
    view.PushTop(QString::fromStdString(elem));
  }
}

void ClipboardController::ShowHostsModelData() {
  for (size_t i = 0; i < model_->GetHostsCount(); ++i) {
    auto& model_data = model_->GetHostData(i);
    auto* view = content_->AddHostView(QString::fromStdString(model_data.name));
    assert(view);
    PopulateData(model_data, *view, false);
  }
}

void ClipboardController::OnTextPushedImpl(size_t index, const QString& text) {
  if (!content_) {
    return;
  }
  HostClipboardView* view = content_->GetHostView(index);
  assert(view);
  view->PushTop(text);
}

void ClipboardController::OnTextPopedImpl(size_t index) {
  if (!content_) {
    return;
  }
  HostClipboardView* view = content_->GetHostView(index);
  assert(view);
  view->PopBottom();
}

}  // namespace reclip
